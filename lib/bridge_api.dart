// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.3.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

abstract class Native {
  Future<String> getRepo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetRepoConstMeta;

  Future<void> setRepo({required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetRepoConstMeta;

  Future<void> openDefaultRepo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kOpenDefaultRepoConstMeta;

  Future<String> getDefaultRepo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDefaultRepoConstMeta;

  Future<void> update({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUpdateConstMeta;

  Future<List<DiffLine>> getDiff({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetDiffConstMeta;

  Future<List<String>> getStatusItems({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetStatusItemsConstMeta;

  Future<void> setSelection(
      {required int index, required bool stage, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetSelectionConstMeta;

  Future<List<String>> getIndexItems({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetIndexItemsConstMeta;

  Future<void> indexUpdate({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIndexUpdateConstMeta;

  Future<bool> commit({required String msg, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCommitConstMeta;
}

class DiffLine {
  final String content;
  final DiffLineType lineType;

  const DiffLine({
    required this.content,
    required this.lineType,
  });
}

enum DiffLineType {
  None,
  Header,
  Add,
  Delete,
}

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) =>
      NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) =>
      NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<String> getRepo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_repo(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kGetRepoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetRepoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_repo",
        argNames: [],
      );

  Future<void> setRepo({required String path, dynamic hint}) {
    var arg0 = _platform.api2wire_String(path);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_repo(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetRepoConstMeta,
      argValues: [path],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetRepoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_repo",
        argNames: ["path"],
      );

  Future<void> openDefaultRepo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_open_default_repo(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kOpenDefaultRepoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kOpenDefaultRepoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "open_default_repo",
        argNames: [],
      );

  Future<String> getDefaultRepo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_default_repo(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: null,
      constMeta: kGetDefaultRepoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDefaultRepoConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_default_repo",
        argNames: [],
      );

  Future<void> update({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_update(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kUpdateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUpdateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "update",
        argNames: [],
      );

  Future<List<DiffLine>> getDiff({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_diff(port_),
      parseSuccessData: _wire2api_list_diff_line,
      parseErrorData: null,
      constMeta: kGetDiffConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetDiffConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_diff",
        argNames: [],
      );

  Future<List<String>> getStatusItems({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_status_items(port_),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: null,
      constMeta: kGetStatusItemsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetStatusItemsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_status_items",
        argNames: [],
      );

  Future<void> setSelection(
      {required int index, required bool stage, dynamic hint}) {
    var arg0 = api2wire_i32(index);
    var arg1 = stage;
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_selection(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kSetSelectionConstMeta,
      argValues: [index, stage],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetSelectionConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "set_selection",
        argNames: ["index", "stage"],
      );

  Future<List<String>> getIndexItems({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_index_items(port_),
      parseSuccessData: _wire2api_StringList,
      parseErrorData: null,
      constMeta: kGetIndexItemsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetIndexItemsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_index_items",
        argNames: [],
      );

  Future<void> indexUpdate({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_index_update(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kIndexUpdateConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIndexUpdateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "index_update",
        argNames: [],
      );

  Future<bool> commit({required String msg, dynamic hint}) {
    var arg0 = _platform.api2wire_String(msg);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_commit(port_, arg0),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kCommitConstMeta,
      argValues: [msg],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCommitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "commit",
        argNames: ["msg"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  DiffLine _wire2api_diff_line(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return DiffLine(
      content: _wire2api_String(arr[0]),
      lineType: _wire2api_diff_line_type(arr[1]),
    );
  }

  DiffLineType _wire2api_diff_line_type(dynamic raw) {
    return DiffLineType.values[raw as int];
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<DiffLine> _wire2api_list_diff_line(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_diff_line).toList();
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
bool api2wire_bool(bool raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>(
          'get_dart_object');
  late final _get_dart_object =
      _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>(
          'drop_dart_object');
  late final _drop_dart_object =
      _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>(
          'new_dart_opaque');
  late final _new_dart_opaque =
      _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_get_repo(
    int port_,
  ) {
    return _wire_get_repo(
      port_,
    );
  }

  late final _wire_get_repoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_repo');
  late final _wire_get_repo =
      _wire_get_repoPtr.asFunction<void Function(int)>();

  void wire_set_repo(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_set_repo(
      port_,
      path,
    );
  }

  late final _wire_set_repoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_set_repo');
  late final _wire_set_repo = _wire_set_repoPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_open_default_repo(
    int port_,
  ) {
    return _wire_open_default_repo(
      port_,
    );
  }

  late final _wire_open_default_repoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_open_default_repo');
  late final _wire_open_default_repo =
      _wire_open_default_repoPtr.asFunction<void Function(int)>();

  void wire_get_default_repo(
    int port_,
  ) {
    return _wire_get_default_repo(
      port_,
    );
  }

  late final _wire_get_default_repoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_default_repo');
  late final _wire_get_default_repo =
      _wire_get_default_repoPtr.asFunction<void Function(int)>();

  void wire_update(
    int port_,
  ) {
    return _wire_update(
      port_,
    );
  }

  late final _wire_updatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_update');
  late final _wire_update = _wire_updatePtr.asFunction<void Function(int)>();

  void wire_get_diff(
    int port_,
  ) {
    return _wire_get_diff(
      port_,
    );
  }

  late final _wire_get_diffPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_diff');
  late final _wire_get_diff =
      _wire_get_diffPtr.asFunction<void Function(int)>();

  void wire_get_status_items(
    int port_,
  ) {
    return _wire_get_status_items(
      port_,
    );
  }

  late final _wire_get_status_itemsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_status_items');
  late final _wire_get_status_items =
      _wire_get_status_itemsPtr.asFunction<void Function(int)>();

  void wire_set_selection(
    int port_,
    int index,
    bool stage,
  ) {
    return _wire_set_selection(
      port_,
      index,
      stage,
    );
  }

  late final _wire_set_selectionPtr = _lookup<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Bool)>>(
      'wire_set_selection');
  late final _wire_set_selection =
      _wire_set_selectionPtr.asFunction<void Function(int, int, bool)>();

  void wire_get_index_items(
    int port_,
  ) {
    return _wire_get_index_items(
      port_,
    );
  }

  late final _wire_get_index_itemsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_index_items');
  late final _wire_get_index_items =
      _wire_get_index_itemsPtr.asFunction<void Function(int)>();

  void wire_index_update(
    int port_,
  ) {
    return _wire_index_update(
      port_,
    );
  }

  late final _wire_index_updatePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_index_update');
  late final _wire_index_update =
      _wire_index_updatePtr.asFunction<void Function(int)>();

  void wire_commit(
    int port_,
    ffi.Pointer<wire_uint_8_list> msg,
  ) {
    return _wire_commit(
      port_,
      msg,
    );
  }

  late final _wire_commitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_commit');
  late final _wire_commit = _wire_commitPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>(
      'new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>(
          'free_WireSyncReturn');
  late final _free_WireSyncReturn =
      _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
